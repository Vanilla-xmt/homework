9. 给定K个整数的序列{ N1, N2, ..., NK }，其任意连续子序列可表示为{ Ni, Ni+1, ..., Nj }，其中 1 <= i <= j <= K。最大连续子序列是所有连续子序列中元素和最大的一个，例如给定序列{ -2, 11, -4, 13, -5, -2 }，其最大连续子序列为{ 11, -4, 13 }，最大和为20。现在增加一个要求，即还需要输出该子序列的第一个和最后一个元素。
对每个测试用例，在1行里输出最大和、最大连续子序列的第一个和最后一个元素，中间用空格分隔。如果最大连续子序列不唯一，则输出序号i和j最小的那个（如输入样例的第2、3组）。若所有K个元素都是负数，则定义其最大和为0，输出整个序列的首尾元素。
#include<iostream>
#include<vector>
using namespace std;
int main()
{
    int n;
    while(cin>>n)
    {
        if(n==0) break;
        int a[n+1],c=0;
        for(int i=0;i<n;i++)
            cin>>a[i];
        for(int i=0;i<n;i++)
            if(a[i]<0)
                c++;
        if(c==n)
        {
            cout<<'0'<<' ';
            cout<<a[0]<<' '<<a[n-1]<<endl;
            return 0;
        }
        else
        {
            int res,beg=0,end=0;
            vector<int> dp(n);
            dp[0]=a[0];
            res=dp[0];
            for(int i=1;i<n;i++)
            {
                dp[i]=max(dp[i-1]+a[i],a[i]);
                if(dp[i]>res)//更新最后一个元素的位置
                    end=i;
                res=max(dp[i],res);
            }
            int flag=0;//看是否有小于0的dp
            for(int i=end;i>=0;i--)//从后往前遍历，找到第一个小于0的数，如果没有找到则循环到第一个
            {
                if(dp[i]<0)
                {
                    beg=i;
                    flag=1;
                    break;
                }
            }
            if(flag==1)
                beg+=1;//找到了第一个小于0的数字，往后挪一个
            cout<<res<<' '<<a[beg]<<' '<<a[end]<<endl;
        }
    }
}
答题思路：这题是求最长连续子序列，多了个要求，就是求出连续序列第一个元素和最后一个元素，然后我前面还是常规的求最长连续子序列，不过多设了一个beg和end来标记第一个和最后一个元素，我首先求出最后一个元素的位置，然后往前遍历，找到第一个。
