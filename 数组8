8. 有n只小熊，他们有着各不相同的战斗力。每次他们吃糖时，会按照战斗力来排，战斗力高的小熊拥有优先选择权。前面的小熊吃饱了，后面的小熊才能吃。
每只小熊有一个饥饿值，每次进食的时候，小熊们会选择最大的能填饱自己当前饥饿值的那颗糖来吃，可能吃完没饱会重复上述过程，但不会选择吃撑。
现在给出n只小熊的战斗力和饥饿值，并且给出m颗糖能填饱的饥饿值。
求所有小熊进食完之后，每只小熊剩余的饥饿值。
#include<stdio.h>
int main(void)
{
    int n,m;
    scanf("%d %d",&n,&m);
    int a[m+1],i,t;
    for(i=0;i<m;i++)
        scanf("%d",&a[i]);
    for(i=0;i<m;i++)
        for(int j=0;j<m-i-1;j++)
            if(a[j]<a[j+1])
            {
                t=a[j];
                a[j]=a[j+1];
                a[j+1]=t;
            }
    int b[n][3];
    for(i=0;i<n;i++)
        for(int j=0;j<2;j++)
            scanf("%d",&b[i][j]);
    for(i=0;i<n;i++)
        b[i][2]=i;
    for(i=0;i<n;i++)
        for(int j=0;j<n-i-1;j++)
            if(b[j][0]<b[j+1][0])
            {
                for(int k=0;k<3;k++)
                {
                    t=b[j][k];
                    b[j][k]=b[j+1][k];
                    b[j+1][k]=t;
                }
            }
    for(int j=0;j<n;j++)
        for(i=0;i<m;i++)
        {
            if(b[j][1]>=a[i])
            {
               b[j][1]-=a[i];
               a[i]=0;
            }
        }
    for(i=0;i<n;i++)
    {
        for(int j=0;j<n;j++)
        {
            if(b[j][2]==i)
                printf("%d\n",b[j][1]);
        }
    }
    return 0;
}
答题思路：这题是一个比较复杂但是不难想的题目，涉及一维数组和二维数组，唯一一个需要注意的点就是最后输出的时候，
顺序是最开始输入的顺序，而不是后来排序交换了之后的顺序，所以我在数组后面带了一个多余的数来表示他们一开始的顺序，
然后还有一点就是要注意输出的格式，每一次输出一个数需要换行，我一开始忘了然后一直过不了。
